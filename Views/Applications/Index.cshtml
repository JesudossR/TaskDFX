@model IPagedList<DolphinFx.Models.Application>
@using X.PagedList
@using X.PagedList.Mvc.Core;
@{
    ViewData["Title"] = "Index";
}

<style>
    /*pagination*/
    .pg {
        margin-top: 40px;
    }

    .pagination {

        display: flex;
        justify-content: center;
        align-items: center;

    }

    .pagination li {
        list-style: none;
        margin: 0 5px;
    }

    .pagination li a {

        text-decoration: none;
        padding: 1px 7px;
        font-size: 14px;
        border: 1px solid #007bff;
        border-radius: 4px;
        color: #007bff;
        background-color: white;
        line-height: 1.5;
        display: inline-block;
        transition: background-color 0.3s, color 0.3s;
    }

    .pagination li a:hover {
        background-color: #007bff;
        /* Change background on hover */
        color: white;
        /* Change text color on hover */
    }

    /* Optional: Highlight the active page */
    .pagination li.active a {
        background-color: #007bff;
        /* Highlight active page */
        color: white;
        /* Change text color for active page */
    }

    .search-container {
        margin-bottom: 20px;
        text-align: left;
        /* Align search input to the left */
        margin-right: 10px;
    }

    .search-button-container {
        display: flex;
        justify-content: space-between;
        /* Space out the items */
        align-items: center;
        /* Center vertically */
        margin-bottom: 20px;
        /* Space below */
    }



    .button-container {
        margin: 0;
        /* Remove default margin */
    }

    .button-container {
        margin: 0;
        /* Remove default margin */
    }

    .table-row {
        cursor: pointer;
        /* Show pointer cursor on hover */
        text-align: center;
    }

    .table-row {
        cursor: pointer;
    }
</style>

<h1>Applications</h1>

<!-- Search Input -->
<div class="search-button-container">
    <div class="search-container">
        <input type="text" id="searchInput" class="form-control" placeholder="Search..." />
    </div>
    <p class="button-container">
        <a class="btn btn-primary create-button" href="javascript:void(0);" onclick="loadCreateForm()">Create New</a>
        @* <a class="btn btn-primary" asp-action="Create">Create New</a> *@
        <a class="btn btn-success" asp-action="ExportToExcel">Export to Excel</a>
    </p>
</div>



<div id="createFormContainer" class="form-container"></div>
<div id="editFormContainer"></div>
<table class="table table-striped table-bordered table-hover" style="width:100%;">
    <thead class="theading">
        <tr>
            <th>Application Name</th>
            <th>Application ShortName</th>
            <th>Application Description</th>
            <th></th>
        </tr>
    </thead>
    <tbody id="tableBody">
        @foreach (var item in Model)
        {
            <tr class="table-row" data-id="@item.ApplicationID" title="Double tap to view Details">
                <td>@Html.DisplayFor(modelItem => item.ApplicationName)</td>
                <td>@Html.DisplayFor(modelItem => item.ApplicationShortName)</td>
                <td>@Html.DisplayFor(modelItem => item.ApplicationDescription)</td>
                <td>
                    <a class="btn btn-success edit-button" href="javascript:void(0);"
                        onclick="loadEditForm(@item.ApplicationID)">Edit</a>
                    @* <a class="btn btn-success" asp-action="Edit" asp-route-id="@item.ApplicationID">Edit</a> | *@ |
                    <a class="btn btn-danger" asp-action="Delete" asp-route-id="@item.ApplicationID">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>



<!-- Pagination Controls -->
<div class="pg">
    <div class="pagination">
        @Html.PagedListPager(Model, page => Url.Action("Index", new { page }), new PagedListRenderOptions
   {
       LinkToPreviousPageFormat = "Prev",
       LinkToNextPageFormat = "Next",
       MaximumPageNumbersToDisplay = 2, // Adjust this to show more or fewer page numbers
       DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded,// makes the 1st page as link if needed
       DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded,//makes the last page no. as link if needed
       DisplayLinkToPreviousPage = PagedListDisplayMode.Always,//previous page link is always visible unless and untill it comes to first page
        DisplayLinkToNextPage = PagedListDisplayMode.Always,//next page link is always visible unless and untill it comes to last page
        UlElementClasses = new[] { "pagination" }, // Pass class name as array
       LiElementClasses = new[] { "page-item" } // Pass class name as array
   })
    </div>
</div>

<!-- Info Message -->
<div class="modal fade" id="infoModal" tabindex="-1" role="dialog" aria-labelledby="infoModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="infoModalLabel">Info</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (TempData["InfoMessage"] != null)
                {
                    @TempData["InfoMessage"]
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for Success Message -->
<div class="modal fade" id="successModal" tabindex="-1" role="dialog" aria-labelledby="successModalLabel"
    aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="successModalLabel">Success</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (TempData["SuccessMessage"] != null)
                {
                    @TempData["SuccessMessage"]
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for showing application details -->
<div class="modal fade" id="detailsModal" tabindex="-1" role="dialog" aria-labelledby="detailsModalLabel"
    aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailsModalLabel">Application Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- Details will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script>
        $(document).ready(function () {
        @if (TempData["InfoMessage"] != null)
        {
            <text>
                        $('#infoModal').modal('show');
            </text>
        }
                var successMessage = '@TempData["SuccessMessage"]';
            if (successMessage) {
                $("#successModal").modal("show");
            }
        });

        // Real-time filtering of table rows
        $('#searchInput').on('keyup', function () {
            var value = $(this).val().toLowerCase();  // Get input value

            $("#tableBody tr").filter(function () {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);  // Show rows that match the input
            });
        });
        function loadForm(url, container, disableButtonClass, enableButtonClass) {
            // Disable the specified buttons before making the AJAX call
            $(disableButtonClass).prop('disabled', true).addClass('disabled');
            $(enableButtonClass).prop('disabled', true).addClass('disabled');
            $.ajax({
                url: url,
                type: 'GET',
                success: function (result) {
                    $(container).html(result);
                    $('html, body').animate({
                        scrollTop: $(container).offset().top
                    }, 1000);
                },
                error: function (xhr, status, error) {
                    alert("An error occurred: " + error);
                    console.error("Error details:", xhr, status, error);
                },
                complete: function () {
                    // Re-enable the other button after AJAX call completes
                    $(enableButtonClass).prop('disabled', false);
                }
            });
        }
        function loadEditForm(id) {
            loadForm('@Url.Action("Edit", "Applications")/' + id, '#editFormContainer', '.create-button', '.edit-button');
        }
        function loadCreateForm() {
            loadForm('@Url.Action("Create", "Applications")', '#createFormContainer', '.edit-button', '.create-button');
        }

        $('.table-row').dblclick(function () {
            var id = $(this).data('id'); // Get the ID from the data attribute

            // AJAX call to fetch details
            $.ajax({
                url: '@Url.Action("Details", "Applications")/' + id,
                type: 'GET',
                success: function (data) {
                    // Load the fetched data into the modal's body
                    $('#detailsModal .modal-body').html(data);
                    // Show the modal
                    $('#detailsModal').modal('show');
                },
                error: function () {
                    $('#detailsModal .modal-body').html('<p>Error loading details.</p>');
                    $('#detailsModal').modal('show');
                }
            });
        });

    </script>
}
