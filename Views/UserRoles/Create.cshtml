@model DolphinFx.Models.UserRole

@{
    ViewData["Title"] = "Create";
}
<style>
    .flex-box {
        display: flex;
        flex-wrap: wrap;
        gap: 16px; /* Adjust the gap between elements */
    }
    
    .form-group {
        flex: 1 1 45%; /* Adjusts the flex basis to ensure two items per row */
        margin-bottom: 16px; /* Adds space below each form group */
    }
    
    .form-group label {
        display: block; /* Ensures the label takes up its own line */
        margin-bottom: 4px; /* Adds space between label and input */
    }
</style>
<h1>Create</h1>

<h4>UserRole</h4>
<hr />
<div class="row">
    <div class="col-md-12">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="flex-box">
                <div class="form-group">
                    <label asp-for="Role" class="control-label">Role</label>
                    <select asp-for="Role" asp-items="@(ViewData["Roles"] as IEnumerable<SelectListItem>)" class="form-control">
                        <option value="" disabled selected>--Select a User Role--</option>
                    </select>
                    <span asp-validation-for="Role" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="RoleDescription" class="control-label">Role Description</label>
                    <input asp-for="RoleDescription" class="form-control" />
                    <span asp-validation-for="RoleDescription" class="text-danger"></span>
                </div>
            </div>
            
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
                <a class="btn btn-primary" asp-action="Index">Back to List</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {

    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    <script>
     document.addEventListener('DOMContentLoaded', function() {
            // Select the RoleDescription input and its validation message span
            const roleDescriptionInput = document.querySelector('input[name="RoleDescription"]');
            const roleDescriptionErrorMessage = document.querySelector('span[data-valmsg-for="RoleDescription"]');
            
            // Add an event listener to validate the input on every change
            roleDescriptionInput.addEventListener('input', function() {
                // Regex to ensure the Role Description starts with a letter and contains only letters, numbers, and spaces
                const regex = /^[a-zA-Z][a-zA-Z0-9\s]*$/;
                
                // Validate and replace any invalid characters
                if (!regex.test(this.value)) {
                    this.value = this.value.replace(/[^a-zA-Z0-9\s]/g, '');
                }
                
                // Check if the first character is a letter
                if (!/^[a-zA-Z]/.test(this.value)) {
                    roleDescriptionErrorMessage.textContent = "Role Description must start with a letter.";
                } else {
                    roleDescriptionErrorMessage.textContent = "";
                }
            });
        });
    </script>
    

}

