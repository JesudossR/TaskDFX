@model DolphinFx.Models.Environment

@{
    ViewData["Title"] = "Edit";
}
<style>
</style>
<h1>Edit</h1>

<h4>Environment</h4>
<hr />
<div class="row">
    <div class="col-md-12">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="EnvironmentID" />
            <div class="flex-box">
                <div class="form-group">
                    <label asp-for="EnvironmentName" class="control-label">Environment Name</label>
                <input asp-for="EnvironmentName" class="form-control" />
                <span asp-validation-for="EnvironmentName" class="text-danger"></span>
            </div>
            <div class="form-group">
                    <label asp-for="EnvironmentDescription" class="control-label">Environment Description</label>
                <input asp-for="EnvironmentDescription" class="form-control" />
                <span asp-validation-for="EnvironmentDescription" class="text-danger"></span>
            </div>
            </div>
            <div class="form-group can-align ">
                <input type="submit" value="Save" class="btn btn-primary" />
                <a class="btn btn-danger" asp-action="Index">Cancel</a>
            </div>
        </form>
    </div>
</div>



@section Scripts
{
     <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Define the validation function
        function addValidation(inputName, fieldName) {
            const inputField = document.querySelector(`input[name="${inputName}"]`);
            const errorMessage = document.querySelector(`span[data-valmsg-for="${inputName}"]`);
            
            inputField.addEventListener('input', function() {
                const regex = /^[a-zA-Z][a-zA-Z0-9\s]*$/;

                // Replace invalid characters
                if (!regex.test(this.value)) {
                    this.value = this.value.replace(/[^a-zA-Z0-9\s]/g, '');
                }

                // Ensure the first character is a letter
                if (!/^[a-zA-Z]/.test(this.value)) {
                    errorMessage.textContent = `${fieldName} must start with a letter.`;
                } else {
                    errorMessage.textContent = "";
                }
            });
        }

        // Apply validation to the desired fields
        addValidation("EnvironmentName", "Environment Name");
        addValidation("EnvironmentDescription", "Environment Description");
    });
    </script>
}